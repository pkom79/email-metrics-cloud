"use client";

import { useEffect, useState } from 'react';
import { DataManager } from '../../../lib/data/dataManager';
import DashboardHeavy from '../../../components/dashboard/DashboardHeavy';

interface SharedDashboardProps {
    snapshotId: string;
    shareTitle: string;
    shareDescription?: string;
    lastEmailDate: string;
    shareToken: string;
}

export default function SharedDashboard({ snapshotId, shareTitle, shareDescription, lastEmailDate, shareToken }: SharedDashboardProps) {
    const [isLoading, setIsLoading] = useState(true);
    const [hasData, setHasData] = useState(false);
    const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        let cancelled = false;

        const loadData = async () => {
            try {
                setIsLoading(true);
                setError(null);

                console.log('Loading shared dashboard data...');

                if (cancelled) return;

                // Create a new DataManager instance for this shared view
                const dm = DataManager.getInstance();

                // Try to load CSV data using the public shared endpoint
                const csvTypes = ['campaigns', 'flows', 'subscribers'];
                const files: Record<string, File> = {};
                let shareTokenError: string | null = null;

                for (const type of csvTypes) {
                    try {
                        console.log(`Fetching ${type} CSV for shared token...`);

                        const response = await fetch(`/api/shared/csv?token=${shareToken}&type=${type}`, {
                            cache: 'no-store'
                        });

                        console.log(`${type} CSV response:`, response.status, response.statusText);

                        if (response.ok) {
                            const text = await response.text();
                            if (text.trim()) {
                                console.log(`${type} CSV loaded successfully, length:`, text.length);
                                const blob = new Blob([text], { type: 'text/csv' });
                                files[type] = new File([blob], `${type}.csv`, { type: 'text/csv' });
                            } else {
                                console.log(`${type} CSV is empty`);
                            }
                        } else {
                            const errorText = await response.text();
                            console.warn(`Failed to load ${type} CSV: ${response.status} ${response.statusText}`, errorText);

                            // Check if this is a share token error (applies to all file types)
                            if (response.status === 404) {
                                try {
                                    const errorData = JSON.parse(errorText);
                                    if (errorData.error?.includes('Invalid or expired share token') ||
                                        errorData.error?.includes('Share link')) {
                                        shareTokenError = errorData.error;
                                        break; // No point checking other file types
                                    }
                                } catch (e) {
                                    // Error parsing response, continue
                                }
                            }
                        }
                    } catch (err) {
                        console.warn(`Failed to load ${type} CSV:`, err);
                    }
                } if (cancelled) return;

                // Check if we have a share token error that affects all requests
                if (shareTokenError) {
                    setError(shareTokenError);
                    return;
                }

                if (Object.keys(files).length > 0) {
                    // Load the CSV data into DataManager
                    const result = await dm.loadCSVFiles({
                        campaigns: files.campaigns,
                        flows: files.flows,
                        subscribers: files.subscribers
                    });

                    if (cancelled) return;

                    if (result.success) {
                        setHasData(true);

                        // Calculate metrics
                        const campaigns = dm.getCampaigns();
                        const flows = dm.getFlowEmails();
                        const allEmails = [...campaigns, ...flows];

                        if (allEmails.length > 0) {
                            const totalRevenue = allEmails.reduce((s, e) => s + e.revenue, 0);
                            const totalEmailsSent = allEmails.reduce((s, e) => s + e.emailsSent, 0);
                            const totalOrders = allEmails.reduce((s, e) => s + e.totalOrders, 0);
                            const totalOpens = allEmails.reduce((s, e) => s + e.uniqueOpens, 0);
                            const totalClicks = allEmails.reduce((s, e) => s + e.uniqueClicks, 0);
                            const totalUnsubs = allEmails.reduce((s, e) => s + e.unsubscribesCount, 0);
                            const totalSpam = allEmails.reduce((s, e) => s + e.spamComplaintsCount, 0);
                            const totalBounces = allEmails.reduce((s, e) => s + e.bouncesCount, 0);

                            const avgOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;
                            const revenuePerEmail = totalEmailsSent > 0 ? totalRevenue / totalEmailsSent : 0;
                            const openRate = totalEmailsSent > 0 ? (totalOpens / totalEmailsSent) * 100 : 0;
                            const clickRate = totalEmailsSent > 0 ? (totalClicks / totalEmailsSent) * 100 : 0;
                            const clickToOpenRate = totalOpens > 0 ? (totalClicks / totalOpens) * 100 : 0;
                            const conversionRate = totalClicks > 0 ? (totalOrders / totalClicks) * 100 : 0;
                            const unsubscribeRate = totalEmailsSent > 0 ? (totalUnsubs / totalEmailsSent) * 100 : 0;
                            const spamRate = totalEmailsSent > 0 ? (totalSpam / totalEmailsSent) * 100 : 0;
                            const bounceRate = totalEmailsSent > 0 ? (totalBounces / totalEmailsSent) * 100 : 0;

                            setMetrics({
                                totalRevenue,
                                avgOrderValue,
                                revenuePerEmail,
                                openRate,
                                clickRate,
                                clickToOpenRate,
                                emailsSent: totalEmailsSent,
                                totalOrders,
                                conversionRate,
                                unsubscribeRate,
                                spamRate,
                                bounceRate,
                                campaignCount: campaigns.length,
                                flowCount: flows.length
                            });
                        }
                    } else {
                        console.error('Failed to process CSV data:', result.errors);
                        setError('Failed to process dashboard data');
                    }
                } else {
                    console.log('No CSV files loaded successfully');
                    setError('No data files are available for this shared dashboard. The dashboard share exists, but the CSV data files may not have been uploaded to storage properly.');
                }
            } catch (err) {
                if (!cancelled) {
                    console.error('Error loading shared dashboard:', err);
                    setError('Failed to load dashboard data');
                }
            } finally {
                if (!cancelled) {
                    setIsLoading(false);
                }
            }
        };

        loadData();

        return () => {
            cancelled = true;
        };
    }, [snapshotId, shareToken]);

    if (isLoading) {
        return (
            <div className="flex items-center justify-center py-12">
                <div className="flex items-center gap-3">
                    <div className="animate-spin h-6 w-6 border-2 border-purple-500 border-t-transparent rounded-full" />
                    <span className="text-gray-600">Loading dashboard data...</span>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                <h3 className="text-lg font-medium text-red-800 mb-2">Unable to Load Dashboard</h3>
                <p className="text-red-600">{error}</p>
            </div>
        );
    }

    if (!hasData || !metrics) {
        return (
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-6 text-center">
                <h3 className="text-lg font-medium text-gray-800 mb-2">No Data Available</h3>
                <p className="text-gray-600">This shared dashboard doesn't have any data to display.</p>
            </div>
        );
    }

    return (
        <div className="space-y-8">
            {/* Overview Section */}
            <section>
                <div className="flex items-center gap-2 mb-6">
                    <Mail className="w-6 h-6 text-purple-600" />
                    <h2 className="text-2xl font-bold text-gray-900">Email Performance Overview</h2>
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-8">
                    <MetricCard
                        title="Total Revenue"
                        value={formatCurrency(metrics.totalRevenue)}
                        change={0}
                        isPositive={true}
                        dateRange="all"
                        metricKey="revenue"
                    />
                    <MetricCard
                        title="Average Order Value"
                        value={formatCurrency(metrics.avgOrderValue)}
                        change={0}
                        isPositive={true}
                        dateRange="all"
                        metricKey="avgOrderValue"
                    />
                    <MetricCard
                        title="Total Orders"
                        value={formatNumber(metrics.totalOrders)}
                        change={0}
                        isPositive={true}
                        dateRange="all"
                        metricKey="totalOrders"
                    />
                    <MetricCard
                        title="Conversion Rate"
                        value={formatPercent(metrics.conversionRate)}
                        change={0}
                        isPositive={true}
                        dateRange="all"
                        metricKey="conversionRate"
                    />
                    <MetricCard
                        title="Open Rate"
                        value={formatPercent(metrics.openRate)}
                        change={0}
                        isPositive={true}
                        dateRange="all"
                        metricKey="openRate"
                    />
                    <MetricCard
                        title="Click Rate"
                        value={formatPercent(metrics.clickRate)}
                        change={0}
                        isPositive={true}
                        dateRange="all"
                        metricKey="clickRate"
                    />
                    <MetricCard
                        title="Click-to-Open Rate"
                        value={formatPercent(metrics.clickToOpenRate)}
                        change={0}
                        isPositive={true}
                        dateRange="all"
                        metricKey="clickToOpenRate"
                    />
                    <MetricCard
                        title="Revenue per Email"
                        value={formatCurrency(metrics.revenuePerEmail)}
                        change={0}
                        isPositive={true}
                        dateRange="all"
                        metricKey="revenuePerEmail"
                    />
                </div>

                {/* Additional Stats */}
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                    <MetricCard
                        title="Emails Sent"
                        value={formatNumber(metrics.emailsSent)}
                        change={0}
                        isPositive={true}
                        dateRange="all"
                        metricKey="emailsSent"
                    />
                    <MetricCard
                        title="Unsubscribe Rate"
                        value={formatPercent(metrics.unsubscribeRate)}
                        change={0}
                        isPositive={false}
                        dateRange="all"
                        metricKey="unsubscribeRate"
                        isNegativeMetric={true}
                    />
                    <MetricCard
                        title="Spam Rate"
                        value={formatPercent(metrics.spamRate)}
                        change={0}
                        isPositive={false}
                        dateRange="all"
                        metricKey="spamRate"
                        isNegativeMetric={true}
                    />
                    <MetricCard
                        title="Bounce Rate"
                        value={formatPercent(metrics.bounceRate)}
                        change={0}
                        isPositive={false}
                        dateRange="all"
                        metricKey="bounceRate"
                        isNegativeMetric={true}
                    />
                </div>
            </section>

            {/* Campaign & Flow Summary */}
            <section>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="bg-white rounded-lg border border-gray-200 p-6">
                        <div className="flex items-center gap-2 mb-4">
                            <Send className="w-5 h-5 text-purple-600" />
                            <h3 className="text-lg font-semibold text-gray-900">Campaigns</h3>
                        </div>
                        <div className="text-3xl font-bold text-gray-900 mb-2">
                            {formatNumber(metrics.campaignCount)}
                        </div>
                        <p className="text-sm text-gray-600">Total campaigns analyzed</p>
                    </div>

                    <div className="bg-white rounded-lg border border-gray-200 p-6">
                        <div className="flex items-center gap-2 mb-4">
                            <Zap className="w-5 h-5 text-purple-600" />
                            <h3 className="text-lg font-semibold text-gray-900">Flows</h3>
                        </div>
                        <div className="text-3xl font-bold text-gray-900 mb-2">
                            {formatNumber(metrics.flowCount)}
                        </div>
                        <p className="text-sm text-gray-600">Email flows analyzed</p>
                    </div>
                </div>
            </section>

            {/* Data Info */}
            <section>
                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                        <Mail className="w-4 h-4 text-purple-600" />
                        <h4 className="text-sm font-medium text-purple-800">Data Coverage</h4>
                    </div>
                    <p className="text-sm text-purple-700">
                        This dashboard shows email marketing performance data through {lastEmailDate}.
                        Metrics reflect email channel performance only and exclude SMS-attributed revenue.
                    </p>
                </div>
            </section>
        </div>
    );
}
